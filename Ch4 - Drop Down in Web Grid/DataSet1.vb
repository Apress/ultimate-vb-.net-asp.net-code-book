'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.288
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet1
    Inherits DataSet
    
    Private tableemployee As employeeDataTable
    
    Private tablejobs As jobsDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("employee")) Is Nothing) Then
                Me.Tables.Add(New employeeDataTable(ds.Tables("employee")))
            End If
            If (Not (ds.Tables("jobs")) Is Nothing) Then
                Me.Tables.Add(New jobsDataTable(ds.Tables("jobs")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property employee As employeeDataTable
        Get
            Return Me.tableemployee
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property jobs As jobsDataTable
        Get
            Return Me.tablejobs
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("employee")) Is Nothing) Then
            Me.Tables.Add(New employeeDataTable(ds.Tables("employee")))
        End If
        If (Not (ds.Tables("jobs")) Is Nothing) Then
            Me.Tables.Add(New jobsDataTable(ds.Tables("jobs")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableemployee = CType(Me.Tables("employee"),employeeDataTable)
        If (Not (Me.tableemployee) Is Nothing) Then
            Me.tableemployee.InitVars
        End If
        Me.tablejobs = CType(Me.Tables("jobs"),jobsDataTable)
        If (Not (Me.tablejobs) Is Nothing) Then
            Me.tablejobs.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-GB")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableemployee = New employeeDataTable
        Me.Tables.Add(Me.tableemployee)
        Me.tablejobs = New jobsDataTable
        Me.Tables.Add(Me.tablejobs)
    End Sub
    
    Private Function ShouldSerializeemployee() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializejobs() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub employeeRowChangeEventHandler(ByVal sender As Object, ByVal e As employeeRowChangeEvent)
    
    Public Delegate Sub jobsRowChangeEventHandler(ByVal sender As Object, ByVal e As jobsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnemp_id As DataColumn
        
        Private columnfname As DataColumn
        
        Private columnminit As DataColumn
        
        Private columnlname As DataColumn
        
        Private columnjob_id As DataColumn
        
        Private columnjob_lvl As DataColumn
        
        Private columnpub_id As DataColumn
        
        Private columnhire_date As DataColumn
        
        Friend Sub New()
            MyBase.New("employee")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property emp_idColumn As DataColumn
            Get
                Return Me.columnemp_id
            End Get
        End Property
        
        Friend ReadOnly Property fnameColumn As DataColumn
            Get
                Return Me.columnfname
            End Get
        End Property
        
        Friend ReadOnly Property minitColumn As DataColumn
            Get
                Return Me.columnminit
            End Get
        End Property
        
        Friend ReadOnly Property lnameColumn As DataColumn
            Get
                Return Me.columnlname
            End Get
        End Property
        
        Friend ReadOnly Property job_idColumn As DataColumn
            Get
                Return Me.columnjob_id
            End Get
        End Property
        
        Friend ReadOnly Property job_lvlColumn As DataColumn
            Get
                Return Me.columnjob_lvl
            End Get
        End Property
        
        Friend ReadOnly Property pub_idColumn As DataColumn
            Get
                Return Me.columnpub_id
            End Get
        End Property
        
        Friend ReadOnly Property hire_dateColumn As DataColumn
            Get
                Return Me.columnhire_date
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As employeeRow
            Get
                Return CType(Me.Rows(index),employeeRow)
            End Get
        End Property
        
        Public Event employeeRowChanged As employeeRowChangeEventHandler
        
        Public Event employeeRowChanging As employeeRowChangeEventHandler
        
        Public Event employeeRowDeleted As employeeRowChangeEventHandler
        
        Public Event employeeRowDeleting As employeeRowChangeEventHandler
        
        Public Overloads Sub AddemployeeRow(ByVal row As employeeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddemployeeRow(ByVal emp_id As String, ByVal fname As String, ByVal minit As String, ByVal lname As String, ByVal job_id As Short, ByVal job_lvl As Byte, ByVal pub_id As String, ByVal hire_date As Date) As employeeRow
            Dim rowemployeeRow As employeeRow = CType(Me.NewRow,employeeRow)
            rowemployeeRow.ItemArray = New Object() {emp_id, fname, minit, lname, job_id, job_lvl, pub_id, hire_date}
            Me.Rows.Add(rowemployeeRow)
            Return rowemployeeRow
        End Function
        
        Public Function FindByemp_id(ByVal emp_id As String) As employeeRow
            Return CType(Me.Rows.Find(New Object() {emp_id}),employeeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As employeeDataTable = CType(MyBase.Clone,employeeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New employeeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnemp_id = Me.Columns("emp_id")
            Me.columnfname = Me.Columns("fname")
            Me.columnminit = Me.Columns("minit")
            Me.columnlname = Me.Columns("lname")
            Me.columnjob_id = Me.Columns("job_id")
            Me.columnjob_lvl = Me.Columns("job_lvl")
            Me.columnpub_id = Me.Columns("pub_id")
            Me.columnhire_date = Me.Columns("hire_date")
        End Sub
        
        Private Sub InitClass()
            Me.columnemp_id = New DataColumn("emp_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemp_id)
            Me.columnfname = New DataColumn("fname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfname)
            Me.columnminit = New DataColumn("minit", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnminit)
            Me.columnlname = New DataColumn("lname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlname)
            Me.columnjob_id = New DataColumn("job_id", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnjob_id)
            Me.columnjob_lvl = New DataColumn("job_lvl", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnjob_lvl)
            Me.columnpub_id = New DataColumn("pub_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpub_id)
            Me.columnhire_date = New DataColumn("hire_date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhire_date)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnemp_id}, true))
            Me.columnemp_id.AllowDBNull = false
            Me.columnemp_id.Unique = true
            Me.columnfname.AllowDBNull = false
            Me.columnlname.AllowDBNull = false
            Me.columnjob_id.AllowDBNull = false
            Me.columnpub_id.AllowDBNull = false
            Me.columnhire_date.AllowDBNull = false
        End Sub
        
        Public Function NewemployeeRow() As employeeRow
            Return CType(Me.NewRow,employeeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New employeeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(employeeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.employeeRowChangedEvent) Is Nothing) Then
                RaiseEvent employeeRowChanged(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.employeeRowChangingEvent) Is Nothing) Then
                RaiseEvent employeeRowChanging(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.employeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent employeeRowDeleted(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.employeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent employeeRowDeleting(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveemployeeRow(ByVal row As employeeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeRow
        Inherits DataRow
        
        Private tableemployee As employeeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableemployee = CType(Me.Table,employeeDataTable)
        End Sub
        
        Public Property emp_id As String
            Get
                Return CType(Me(Me.tableemployee.emp_idColumn),String)
            End Get
            Set
                Me(Me.tableemployee.emp_idColumn) = value
            End Set
        End Property
        
        Public Property fname As String
            Get
                Return CType(Me(Me.tableemployee.fnameColumn),String)
            End Get
            Set
                Me(Me.tableemployee.fnameColumn) = value
            End Set
        End Property
        
        Public Property minit As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.minitColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.minitColumn) = value
            End Set
        End Property
        
        Public Property lname As String
            Get
                Return CType(Me(Me.tableemployee.lnameColumn),String)
            End Get
            Set
                Me(Me.tableemployee.lnameColumn) = value
            End Set
        End Property
        
        Public Property job_id As Short
            Get
                Return CType(Me(Me.tableemployee.job_idColumn),Short)
            End Get
            Set
                Me(Me.tableemployee.job_idColumn) = value
            End Set
        End Property
        
        Public Property job_lvl As Byte
            Get
                Try 
                    Return CType(Me(Me.tableemployee.job_lvlColumn),Byte)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.job_lvlColumn) = value
            End Set
        End Property
        
        Public Property pub_id As String
            Get
                Return CType(Me(Me.tableemployee.pub_idColumn),String)
            End Get
            Set
                Me(Me.tableemployee.pub_idColumn) = value
            End Set
        End Property
        
        Public Property hire_date As Date
            Get
                Return CType(Me(Me.tableemployee.hire_dateColumn),Date)
            End Get
            Set
                Me(Me.tableemployee.hire_dateColumn) = value
            End Set
        End Property
        
        Public Function IsminitNull() As Boolean
            Return Me.IsNull(Me.tableemployee.minitColumn)
        End Function
        
        Public Sub SetminitNull()
            Me(Me.tableemployee.minitColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isjob_lvlNull() As Boolean
            Return Me.IsNull(Me.tableemployee.job_lvlColumn)
        End Function
        
        Public Sub Setjob_lvlNull()
            Me(Me.tableemployee.job_lvlColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As employeeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As employeeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As employeeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class jobsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnjob_id As DataColumn
        
        Private columnjob_desc As DataColumn
        
        Private columnmin_lvl As DataColumn
        
        Private columnmax_lvl As DataColumn
        
        Friend Sub New()
            MyBase.New("jobs")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property job_idColumn As DataColumn
            Get
                Return Me.columnjob_id
            End Get
        End Property
        
        Friend ReadOnly Property job_descColumn As DataColumn
            Get
                Return Me.columnjob_desc
            End Get
        End Property
        
        Friend ReadOnly Property min_lvlColumn As DataColumn
            Get
                Return Me.columnmin_lvl
            End Get
        End Property
        
        Friend ReadOnly Property max_lvlColumn As DataColumn
            Get
                Return Me.columnmax_lvl
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As jobsRow
            Get
                Return CType(Me.Rows(index),jobsRow)
            End Get
        End Property
        
        Public Event jobsRowChanged As jobsRowChangeEventHandler
        
        Public Event jobsRowChanging As jobsRowChangeEventHandler
        
        Public Event jobsRowDeleted As jobsRowChangeEventHandler
        
        Public Event jobsRowDeleting As jobsRowChangeEventHandler
        
        Public Overloads Sub AddjobsRow(ByVal row As jobsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddjobsRow(ByVal job_desc As String, ByVal min_lvl As Byte, ByVal max_lvl As Byte) As jobsRow
            Dim rowjobsRow As jobsRow = CType(Me.NewRow,jobsRow)
            rowjobsRow.ItemArray = New Object() {Nothing, job_desc, min_lvl, max_lvl}
            Me.Rows.Add(rowjobsRow)
            Return rowjobsRow
        End Function
        
        Public Function FindByjob_id(ByVal job_id As Short) As jobsRow
            Return CType(Me.Rows.Find(New Object() {job_id}),jobsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As jobsDataTable = CType(MyBase.Clone,jobsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New jobsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnjob_id = Me.Columns("job_id")
            Me.columnjob_desc = Me.Columns("job_desc")
            Me.columnmin_lvl = Me.Columns("min_lvl")
            Me.columnmax_lvl = Me.Columns("max_lvl")
        End Sub
        
        Private Sub InitClass()
            Me.columnjob_id = New DataColumn("job_id", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnjob_id)
            Me.columnjob_desc = New DataColumn("job_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnjob_desc)
            Me.columnmin_lvl = New DataColumn("min_lvl", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmin_lvl)
            Me.columnmax_lvl = New DataColumn("max_lvl", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmax_lvl)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnjob_id}, true))
            Me.columnjob_id.AutoIncrement = true
            Me.columnjob_id.AllowDBNull = false
            Me.columnjob_id.ReadOnly = true
            Me.columnjob_id.Unique = true
            Me.columnjob_desc.AllowDBNull = false
            Me.columnmin_lvl.AllowDBNull = false
            Me.columnmax_lvl.AllowDBNull = false
        End Sub
        
        Public Function NewjobsRow() As jobsRow
            Return CType(Me.NewRow,jobsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New jobsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(jobsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.jobsRowChangedEvent) Is Nothing) Then
                RaiseEvent jobsRowChanged(Me, New jobsRowChangeEvent(CType(e.Row,jobsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.jobsRowChangingEvent) Is Nothing) Then
                RaiseEvent jobsRowChanging(Me, New jobsRowChangeEvent(CType(e.Row,jobsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.jobsRowDeletedEvent) Is Nothing) Then
                RaiseEvent jobsRowDeleted(Me, New jobsRowChangeEvent(CType(e.Row,jobsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.jobsRowDeletingEvent) Is Nothing) Then
                RaiseEvent jobsRowDeleting(Me, New jobsRowChangeEvent(CType(e.Row,jobsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovejobsRow(ByVal row As jobsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class jobsRow
        Inherits DataRow
        
        Private tablejobs As jobsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablejobs = CType(Me.Table,jobsDataTable)
        End Sub
        
        Public Property job_id As Short
            Get
                Return CType(Me(Me.tablejobs.job_idColumn),Short)
            End Get
            Set
                Me(Me.tablejobs.job_idColumn) = value
            End Set
        End Property
        
        Public Property job_desc As String
            Get
                Return CType(Me(Me.tablejobs.job_descColumn),String)
            End Get
            Set
                Me(Me.tablejobs.job_descColumn) = value
            End Set
        End Property
        
        Public Property min_lvl As Byte
            Get
                Return CType(Me(Me.tablejobs.min_lvlColumn),Byte)
            End Get
            Set
                Me(Me.tablejobs.min_lvlColumn) = value
            End Set
        End Property
        
        Public Property max_lvl As Byte
            Get
                Return CType(Me(Me.tablejobs.max_lvlColumn),Byte)
            End Get
            Set
                Me(Me.tablejobs.max_lvlColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class jobsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As jobsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As jobsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As jobsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
